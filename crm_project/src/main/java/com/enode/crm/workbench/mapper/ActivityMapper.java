package com.enode.crm.workbench.mapper;

import com.enode.crm.workbench.domain.Activity;
import org.apache.ibatis.annotations.Param;

import java.util.List;
import java.util.Map;

public interface ActivityMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Thu Jul 03 10:36:46 KST 2025
     */
    int deleteByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Thu Jul 03 10:36:46 KST 2025
     */
    int insertSelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Thu Jul 03 10:36:46 KST 2025
     */
    Activity selectByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Thu Jul 03 10:36:46 KST 2025
     */
    int updateByPrimaryKeySelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Thu Jul 03 10:36:46 KST 2025
     */
    int updateByPrimaryKey(Activity record);

    /**
     * 保存创建的市场活动
     */
    int insertActivity(Activity activity);

    /**
     * 根据条件分页查询市场活动的列表
     *
     * @return
     */
    List<Activity> selectActivityByConditionForPaging(Map<String, Object> map);

    /**
     * 根据条件查询市场活动的总条数
     *
     * @param map
     * @return
     */
    int selectCountOfActivitiesByCondition(Map<String, Object> map);

    /**
     * 根据ids批量删除市场活动
     *
     * @param ids
     * @return
     */
    int deleteActivityByIds(@Param("ids") String[] ids);

    /**
     * 根据id查询市场活动的信息
     *
     * @param id
     * @return
     */
    Activity selectActivityById(@Param("id") String id);

    /**
     * 保存修改的市场活动
     *
     * @param activity
     * @return
     */
    int updateActivity(Activity activity);

    /**
     * 查询所有的市场活动
     *
     * @return
     */
    List<Activity> selectAllActivities();

    /**
     * 查询用户选择的市场活动
     *
     * @param ids
     * @return
     */
    List<Activity> selectActivitiesByIds(@Param("ids") String[] ids);

    /**
     * 批量保存上传的市场活动
     *
     * @param activityList
     * @return
     */
    int insertActivitiesByList(@Param("activityList") List<Activity> activityList);

    /**
     * 根据id查询市场活动的明细信息
     *
     * @param id
     * @return
     */
    Activity selectActivityForDetailById(@Param("id") String id);
}